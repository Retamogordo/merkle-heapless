use core::fmt::Debug;
use core::hash::Hash;
/// trait for a hash pluggable to Merkle tree at compile time
pub trait HashT {
    /// output returned by hash implementor
    type Output: Hash + Default + Copy + AsRef<[u8]> + PartialEq + Debug;
    /// hash implementation
    fn hash(input: &[u8]) -> Self::Output;
}
/// trait that an item contained in a proof implements.
/// [ProofBuilder] implementor relies on it
pub trait ProofItemT<H: HashT>: Clone + Default + Debug {
    /// consructor
    fn create(offset: usize, hashes: &[H::Output]) -> Self;
    /// hash the hashed input with its siblings
    fn hash_with_siblings(self, word_hash: H::Output) -> Option<H::Output>;
}
/// trait for building a proof
/// a proof is normally supposed to implement both [ProofBuilder] and [ProofValidator]
/// [StaticTreeTrait.generate_proof]
pub trait ProofBuilder<H: HashT>: Default {
    /// type of the item this proof contains
    type Item: ProofItemT<H>;
    /// create a proof instance and assign its root
    fn from_root(root: H::Output) -> Self;
    /// return proof's root
    fn root(&self) -> H::Output;
    /// add a new item to proof
    fn push(&mut self, offset: usize, hashes: &[H::Output]);
}

/// trait for verifying a proof generated by a [ProofBuilder] implementor
pub trait ProofValidator {
    /// verify the proof at given index
    fn validate(self, input: &[u8]) -> bool;
}
/// trait for a basic Merkle Tree functionality
pub trait StaticTreeTrait<H: HashT, PB: ProofBuilder<H>> {
    /// generate a proof for a leaf at index
    fn generate_proof(&mut self, index: usize) -> PB;
    /// replace a leaf at index with a new value
    fn replace(&mut self, index: usize, input: &[u8]);
    /// replace a hashed leaf at index with a new hashed value
    fn replace_leaf(&mut self, index: usize, leaf: H::Output);
    /// return a root
    fn root(&self) -> H::Output;
    /// return a slice of leaves
    fn leaves(&self) -> &[H::Output];
    /// a size (not necessarily a number of currently present leaves) of the leaf layer
    fn base_layer_size(&self) -> usize;
    /// returns tree's arity (determined at compile time)
    fn branch_factor(&self) -> usize;
    /// returns tree's height (determined at compile time)
    fn height(&self) -> usize;
}
/// trait for append-only Merkle tree semantics
pub trait AppendOnly {
    /// appends a new leaf into the tree unless it's full
    fn try_append(&mut self, input: &[u8]) -> Result<(), ()>;
    /// number of leaves currently stored in the tree
    fn num_of_leaves(&self) -> usize;
}

/// trait for Merkle tree supporting leaf removal
pub trait CanRemove {
    /// removes a leaf at index
    fn try_remove(&mut self, index: usize) -> Result<(), ()>;
    /// number of leaves currently stored in the tree
    fn num_of_leaves(&self) -> usize;
}
